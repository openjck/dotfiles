#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2023 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Set up the packages, directories, plugin managers, and other dotfile
dependencies used across machines.

This script is idempotent and can therefore be run multiple times without
affecting the result, assuming the script's implementation does not change
between invocations. It should be rerun occasionally or whenever important
details change, like configured packages or configured directories.

Usage:
  $COMMAND_NAME
  $COMMAND_NAME -h | --help

Options:
  -h, --help
      Show this documentation
EOF
)"

RETURN_CODE_DONE=0
RETURN_CODE_ALREADY_DONE=1
RETURN_CODE_UNSUPPORTED=2

# Manually source the ".profile" file, since we need to use some of the
# environment variables that it sets and this script might be running before the
# ".profile" file is applied.
source "$HOME/.profile"

function run_set_up_functions() {
  STEPS=$1

  LONGEST_NAME_LENGTH=0

  I=0
  while true; do
    NAME=${STEPS[$I,name]:-}

    # Break if we've passed the end of the associative array.
    [[ -z "$NAME" ]] && break;

    NAME_LENGTH=$(echo -n "$NAME" | wc --chars)
    if (( NAME_LENGTH > LONGEST_NAME_LENGTH )); then
      LONGEST_NAME_LENGTH=$NAME_LENGTH
    fi

    I=$((I + 1))
  done

  I=0
  while true; do
    NAME=${STEPS[$I,name]:-}

    # Break if we've passed the end of the associative array.
    [[ -z "$NAME" ]] && break;

    run_set_up_function \
      "$NAME" \
      "${STEPS[$I,own_output_on_success]:-false}" \
      "$LONGEST_NAME_LENGTH"

    I=$((I + 1))
  done
}

function run_set_up_function() {
  local NAME=$1
  local OWN_OUTPUT_ON_SUCCESS=${2:-false}
  local LONGEST_NAME_LENGTH=$3

  local NAME_SUFFIX='... '
  local NAME_SUFFIX_LENGTH
  NAME_SUFFIX_LENGTH=$(echo -n "$NAME_SUFFIX" | wc --chars)

  local PAD_LENGTH=$(( LONGEST_NAME_LENGTH + NAME_SUFFIX_LENGTH ))

  local PADDED_NAME_AND_ELLIPSES
  PADDED_NAME_AND_ELLIPSES=$(
    printf "%-${PAD_LENGTH}s" "${NAME}${NAME_SUFFIX}"
  )

  echo -n "Set up $PADDED_NAME_AND_ELLIPSES"

  set +e
  "set_up_$NAME"
  RETURN_CODE=$?
  set -e

  case $RETURN_CODE in
    "$RETURN_CODE_DONE")
      if [[ $OWN_OUTPUT_ON_SUCCESS == true ]]; then
        echo
      else
        echo 'done.'
      fi
      ;;
    "$RETURN_CODE_ALREADY_DONE")
      echo 'already done.'
      ;;
    "$RETURN_CODE_UNSUPPORTED")
      echo 'unsupported.'
      ;;
  esac
}

function set_up_packages_ubuntu() {
  declare PACKAGES_TO_INSTALL=()

  local PACKAGES=(
    'bat'
    'fd-find'
    'fzf'
    'git'
    'moreutils'
    'neovim'
    'ripgrep'
    'toilet'
    'vcsh'
  )

  local PACKAGE
  for PACKAGE in "${PACKAGES[@]}"; do
    # If the package is not already installed, add it to the
    # $PACKAGES_TO_INSTALL array.
    #
    # https://askubuntu.com/a/1393059
    if [[ $(dpkg-query --show --showformat='${db:Status-Status}\n' "$PACKAGE" 2>/dev/null) != 'installed' ]]; then
      PACKAGES_TO_INSTALL+=("$PACKAGE")
    fi
  done

  # If there are no packages to install, return with a code indicating that
  # this is already done. Otherwise, install the packages.
  if [[ ${#PACKAGES_TO_INSTALL[@]} -eq 0 ]]; then
    return $RETURN_CODE_ALREADY_DONE
  else
    echo

    sudo apt-get install --yes "${PACKAGES_TO_INSTALL[@]}"
    return $RETURN_CODE_DONE
  fi
}

function set_up_packages() {
  case $DISTRO in
    Ubuntu)
      set_up_packages_ubuntu
      ;;
    *)
      return $RETURN_CODE_UNSUPPORTED
      ;;
  esac
}

function set_up_vcsh() {
  local MODIFIED_CONFIG=false

  if [[ $(vcsh dotfiles-openjck config core.sparseCheckout) != 'true' ]]; then
    vcsh dotfiles-openjck config core.sparseCheckout true
    MODIFIED_CONFIG=true
  fi

  local SC_CONTENTS="*
!/README.md
!/LICENSE"

  local SC_FILE=$XDG_CONFIG_HOME/vcsh/repo.d/dotfiles-openjck.git/info/sparse-checkout

  if [[ ! -f "$SC_FILE" || ($(cat "$SC_FILE") != "$SC_CONTENTS") ]]; then
    echo "$SC_CONTENTS" > "$SC_FILE"
    MODIFIED_CONFIG=true
  fi

  if [[ $MODIFIED_CONFIG == true ]]; then
    vcsh dotfiles-openjck checkout --quiet
    return $RETURN_CODE_DONE
  else
    return $RETURN_CODE_ALREADY_DONE
  fi
}

function set_up_directories() {
  local CREATED_ANY=false

  local DIRECTORIES=(
    "$HOME/LGTD/inboxes/main"
    "$HOME/apps/repos/git"
    "$HOME/bin/local"
    "$HOME/bin/local/downloaded"
    "$HOME/bin/local/temporary"
    "$HOME/devel"
    "$HOME/devel/repos"
    "$XDG_CONFIG_HOME/bash/init/functions/local"
  )

  local DIRECTORY
  for DIRECTORY in "${DIRECTORIES[@]}"; do
    if [[ ! -d "$DIRECTORY" ]]; then
      mkdir --parents "$DIRECTORY"
      CREATED_ANY=true
    fi
  done

  if [[ $CREATED_ANY == true ]]; then
    return $RETURN_CODE_DONE
  else
    return $RETURN_CODE_ALREADY_DONE
  fi
}

# Set up Neovim.
#
# Note that a separate file is used for plugin configuration. If plugins were
# configured in the main configuration file and we tried to load that
# configuration file during the initial setup, Neovim would complain about
# things like missing colorschemes.
function set_up_nvim() {
  local PLUGIN_MANAGER_FILENAME=$XDG_DATA_HOME/nvim/site/autoload/plug.vim

  if [[ -f "$PLUGIN_MANAGER_FILENAME" ]]; then
    return $RETURN_CODE_ALREADY_DONE
  else
    # Install vim-plug.
    curl --silent --fail --location --create-dirs --output \
      "$PLUGIN_MANAGER_FILENAME" \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    # Install plugins.
    nvim -u "$XDG_CONFIG_HOME/nvim/init/plugins/index.vim" -c PlugInstall -c quitall

    return $RETURN_CODE_DONE
  fi
}

function set_up_tmux() {
  local PLUGIN_MANAGER_DIR=$HOME/.tmux/plugins/tpm

  if [[ -d "$PLUGIN_MANAGER_DIR" ]]; then
    return $RETURN_CODE_ALREADY_DONE
  else
    # Install tpm.
    git clone --quiet https://github.com/tmux-plugins/tpm "$PLUGIN_MANAGER_DIR"

    # Install plugins.
    "$HOME/.tmux/plugins/tpm/bin/install_plugins" > /dev/null

    return $RETURN_CODE_DONE
  fi
}

declare -A STEPS

STEPS[0,name]=packages
STEPS[0,own_output_on_success]=true
STEPS[1,name]=vcsh
STEPS[2,name]=directories
STEPS[3,name]=nvim
STEPS[4,name]=tmux

run_set_up_functions "${STEPS[@]}"
