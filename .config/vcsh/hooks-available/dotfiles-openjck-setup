#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2023 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Set up the dotfiles, packages, directories, and other standard configurations
used across machines.

This command is idempotent and can therefore be run multiple times without
affecting the result, assuming the command's implementation does not change
between invocations. The command should be rerun occasionally or whenever
important details change, like configured packages or configured directories.

Usage:
  $COMMAND_NAME
  $COMMAND_NAME -h | --help

Options:
  -h, --help
      Show this documentation
EOF
)"

RETURN_CODE_DONE=0
RETURN_CODE_ALREADY_DONE=1

# Manually source the ".profile" file, since we need to use some of the
# environment variables that it sets and this script might be running before the
# ".profile" file is applied.
source "$HOME/.profile"

function install_packages() {
  local PACKAGES=(
    'bat'
    'fd-find'
    'fzf'
    'git'
    'moreutils'
    'neovim'
    'ripgrep'
    'toilet'
    'vcsh'
  )

  if [[ $DISTRO == Ubuntu ]]; then
    # Ignore SC2068 because we want each package name to be a separate argument.
    # (Quoting the list of package names would be fine, too, but we don't _need_
    # to do that.)
    #
    # shellcheck disable=SC2068
    sudo apt install ${PACKAGES[@]}
  fi
}

function setup_directories() {
  local CREATED_ANY=false

  local DIRECTORIES=(
    "$HOME/GTD/inboxes/main"
    "$HOME/GTD/project-support/main"
    "$HOME/apps/repos/git"
    "$HOME/bin/local"
    "$HOME/bin/local/downloaded"
    "$HOME/bin/local/temporary"
    "$HOME/devel"
    "$HOME/devel/repos"
    "$XDG_CONFIG_HOME/bash/init/functions/local"
  )

  for DIRECTORY in "${DIRECTORIES[@]}"; do
    if [[ ! -d "$DIRECTORY" ]]; then
      mkdir --parents "$DIRECTORY"
      CREATED_ANY=true
    fi
  done

  if [[ $CREATED_ANY == true ]]; then
    return $RETURN_CODE_DONE
  else
    return $RETURN_CODE_ALREADY_DONE
  fi
}

# Set up Neovim.
#
# Note that a separate file is used for plugin configuration. If plugins were
# configured in the main configuration file and we tried to load that
# configuration file during the initial setup, Neovim would complain about
# things like missing colorschemes.
function setup_nvim() {
  local PLUGIN_MANAGER_FILENAME=$XDG_DATA_HOME/nvim/site/autoload/plug.vim

  if [[ -f "$PLUGIN_MANAGER_FILENAME" ]]; then
    return $RETURN_CODE_ALREADY_DONE
  else
    # Install vim-plug.
    curl --silent --fail --location --create-dirs --output \
      "$PLUGIN_MANAGER_FILENAME" \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    # Install plugins.
    nvim -u "$XDG_CONFIG_HOME/nvim/init/plugins/index.vim" -c PlugInstall -c quitall

    return $RETURN_CODE_DONE
  fi
}

function setup_tmux() {
  local PLUGIN_MANAGER_DIR=$HOME/.tmux/plugins/tpm

  if [[ -d "$PLUGIN_MANAGER_DIR" ]]; then
    return $RETURN_CODE_ALREADY_DONE
  else
    # Install tpm.
    git clone --quiet https://github.com/tmux-plugins/tpm "$PLUGIN_MANAGER_DIR"

    # Install plugins.
    "$HOME/.tmux/plugins/tpm/bin/install_plugins" > /dev/null

    return $RETURN_CODE_DONE
  fi
}

function setup_vcsh_repo() {
  local MODIFIED_CONFIG=false

  if [[ $(vcsh dotfiles-openjck config core.sparseCheckout) != 'true' ]]; then
    vcsh dotfiles-openjck config core.sparseCheckout true
    MODIFIED_CONFIG=true
  fi

  local SC_CONTENTS="*
!README.md
!LICENSE"

  local SC_FILE=$XDG_CONFIG_HOME/vcsh/repo.d/dotfiles-openjck.git/info/sparse-checkout

  if [[ ! -f "$SC_FILE" || ($(cat "$SC_FILE") != "$SC_CONTENTS") ]]; then
    echo "$SC_CONTENTS" > "$SC_FILE"
    MODIFIED_CONFIG=true
  fi

  if [[ $MODIFIED_CONFIG == true ]]; then
    vcsh dotfiles-openjck checkout --quiet
    return $RETURN_CODE_DONE
  else
    return $RETURN_CODE_ALREADY_DONE
  fi
}

function run_setup_function() {
  local FUNCTION=$1
  local DESCRIPTION=$2

  echo -n "Set up $DESCRIPTION... "

  if "$FUNCTION"; then
    echo 'done.'
  else
    echo 'already done.'
  fi
}

echo 'Install packages...' && install_packages
echo
run_setup_function setup_vcsh_repo 'vcsh repo'
run_setup_function setup_directories directories
run_setup_function setup_nvim nvim
run_setup_function setup_tmux tmux
