#!/usr/bin/env bash

# npm-upgrade-packages:
# Update package.json and package-lock.json to use latest versions.
#
# Installation instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#installation
#
# Usage instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#usage

# MIT License
#
# Copyright (c) 2023, 2024, 2025 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

##########################
# BEGIN DEPENDENCY CHECK #
##########################

DEPENDENCIES=(
  docopts
  npm
  npx
)

MISSING_DEPENDENCIES=()

for DEPENDENCY in "${DEPENDENCIES[@]}"; do
  if ! command -v "$DEPENDENCY" > /dev/null; then
    MISSING_DEPENDENCIES+=("$DEPENDENCY")
  fi
done

if (( ${#MISSING_DEPENDENCIES[@]} > 0 )); then
  >&2 fold --spaces <<EOF
FATAL ERROR: The following are not installed. They must be manually installed \
for "$COMMAND_NAME" to function properly.

EOF
  for DEPENDENCY in "${MISSING_DEPENDENCIES[@]}"; do
    >&2 echo "  - $DEPENDENCY"
  done
  exit 1
fi

########################
# END DEPENDENCY CHECK #
########################

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Update package.json and package-lock.json to use latest versions.

Update package.json and package-lock.json to use the latest versions of all
packages, then run "npm install".

Usage:
  $COMMAND_NAME [--from-scratch]
  $COMMAND_NAME -h | --help

Options:
  --from-scratch
      Start by removing node_modules and package-lock.json
  -h, --help
      Show this documentation
EOF
)"

if ${ARGS[--from-scratch]}; then
  rm -rf node_modules package-lock.json
fi

# Set "npm_config_yes=true" to prevent npx from prompting for confirmation
# before installing npm-check-updates. Ostensibly, the "--yes" flag can be
# passed to npx to achieve the same effect, but for some odd reason, I find that
# it causes npm-check-updates to act as if the "--upgrade" flag has not been
# passed to it.
npm_config_yes=true npx npm-check-updates --upgrade && npm install
