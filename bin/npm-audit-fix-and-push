#!/usr/bin/env bash

# npm-audit-fix-and-push:
# Run "npm audit fix" in a repo. Then, use Git to commit and push the result.
#
# Installation instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#installation
#
# Usage instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#usage

# MIT License
#
# Copyright (c) 2024, 2025 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

##########################
# BEGIN DEPENDENCY CHECK #
##########################

DEPENDENCIES=(
  docopts
  npm
  git
)

MISSING_DEPENDENCIES=()

for DEPENDENCY in "${DEPENDENCIES[@]}"; do
  if ! command -v "$DEPENDENCY" > /dev/null; then
    MISSING_DEPENDENCIES+=("$DEPENDENCY")
  fi
done

if (( ${#MISSING_DEPENDENCIES[@]} > 0 )); then
  >&2 fold --spaces <<EOF
FATAL ERROR: The following are not installed. They must be manually installed \
for "$COMMAND_NAME" to function properly.

EOF
  for DEPENDENCY in "${MISSING_DEPENDENCIES[@]}"; do
    >&2 echo "  - $DEPENDENCY"
  done
  exit 1
fi

########################
# END DEPENDENCY CHECK #
########################

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Run "npm audit fix" in a repo. Then, use Git to commit and push the result.

Git command output is not hidden. Additionally, "npm audit" is run before "npm
audit fix" to display the issues that will be fixed.

Usage:
  $COMMAND_NAME [-b BRANCH] [-m MESSAGE]
  $COMMAND_NAME -h | --help

Options:
  -b BRANCH, --branch BRANCH
      The branch that "npm audit fix" should be run on [default: main]
  -m MESSAGE, --message MESSAGE
      The commit message to use when committing the change
      [default: Run "npm audit fix"]
  -h, --help
      Show this documentation
EOF
)"

# Running "git rev-parse" prints an error if we are not in a Git repo. If the
# command is successful, however, it is silent and we continue.
if git rev-parse; then
  if test -n "$(git status --porcelain)"; then
    >&2 cat <<'EOF'
FATAL ERROR: Working directory is dirty. Stash or commit any changes. Then, run
this command again.
EOF
    exit 1
  fi

  git switch "${ARGS[--branch]}"
  git pull
  npm audit || true
  npm audit fix
  git add -u
  git commit -m "${ARGS[--message]}"
  git push
  git switch -
fi
