#!/usr/bin/env bash

# vcsh-shellcheck:
# Run ShellCheck against supported shell scripts tracked by vcsh.
#
# Installation instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#installation
#
# Usage instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#usage

# MIT License
#
# Copyright (c) 2023, 2025 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

##########################
# BEGIN DEPENDENCY CHECK #
##########################

DEPENDENCIES=(
  docopts
  shellcheck
  vcsh
)

MISSING_DEPENDENCIES=()

for DEPENDENCY in "${DEPENDENCIES[@]}"; do
  if ! command -v "$DEPENDENCY" > /dev/null; then
    MISSING_DEPENDENCIES+=("$DEPENDENCY")
  fi
done

if (( ${#MISSING_DEPENDENCIES[@]} > 0 )); then
  >&2 fold --spaces <<EOF
FATAL ERROR: The following are not installed. They must be manually installed \
for "$COMMAND_NAME" to function properly.

EOF
  for DEPENDENCY in "${MISSING_DEPENDENCIES[@]}"; do
    >&2 echo "  - $DEPENDENCY"
  done
  exit 1
fi

########################
# END DEPENDENCY CHECK #
########################

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Run ShellCheck against supported shell scripts tracked by vcsh.

Usage:
  $COMMAND_NAME [--debug]
  $COMMAND_NAME -h | --help

Options:
  --debug
      Print debugging information, including information about which files are
      linted with ShellCheck.
  -h, --help
      Show this documentation
EOF
)"

function has-shell-script-filename() {
  local FILENAME=$1
  local BASENAME

  BASENAME=$(basename "$FILENAME")

  # Match based on exact basename.
  [[ $BASENAME == '.bash_login' ]] ||
  [[ $BASENAME == '.bash_logout' ]] ||
  [[ $BASENAME == '.bash_profile' ]] ||
  [[ $BASENAME == '.bashrc' ]] ||
  [[ $BASENAME == '.kshrc' ]] ||
  [[ $BASENAME == '.profile' ]] ||

  # Match based on file extension.
  [[ $BASENAME =~ \.(bash|dash|ksh|sh)$ ]]
}

function has-shell-script-content() {
  local FILENAME=$1

  # Test if the file has the shebang of a script type supported by ShellCheck.
  grep --quiet --extended-regexp '#!.*\s+(bash|dash|ksh|sh)$' "$FILENAME" ||

  # Test if the file contains a ShellCheck directive.
  #
  # Testing for the existence of the string "source-path" is redundant (testing
  # for "source" would be enough), but I want to be explicit.
  grep --quiet --extended-regexp \
    'shellcheck\s+(disable|enable|external-sources|source|source-path|shell)' \
    "$FILENAME"
}

function is-shellcheck-file() {
  local FILENAME=$1

  has-shell-script-filename "$FILENAME" ||
  has-shell-script-content "$FILENAME"
}

function main() {
  local FILES_TO_LINT=()

  # cd to $HOME so that "vcsh list-tracked" lists all files, not just tracked
  # files in the current directory and its subdirectories.
  cd "$HOME" || exit 1

  # Use vcsh to list all tracked files and use mapfile to convert the lines of
  # output into an array.
  #
  # https://stackoverflow.com/a/13825568/715866
  mapfile -t ALL_VCSH_FILES < <(vcsh list-tracked)

  if ${ARGS[--debug]}; then
    echo 'Files that will be linted with ShellCheck:'
    echo
  fi

  for VCSH_FILE in "${ALL_VCSH_FILES[@]}"; do
    # Some files which are tracked by vcsh might not actually be present on the
    # filesystem. For example, they might be  ignored via sparse-checkout.
    if [[ -f $VCSH_FILE ]] && is-shellcheck-file "$VCSH_FILE"; then
      FILES_TO_LINT+=("$VCSH_FILE")
      if ${ARGS[--debug]}; then
        echo "$VCSH_FILE"
      fi
    fi
  done

  if ${ARGS[--debug]}; then
    echo
    echo 'Linting...'
    echo
  fi

  # If the --external-sources flag is not provided, ShellCheck will not follow
  # even literal paths, like that paths to Bash completions in .bashrc, and will
  # complain about error SC1091.
  #
  # I'd rather enable --external-sources in shellcheckrc, but at the time of
  # this writing, doing so is not possible.
  #
  # https://github.com/koalaman/shellcheck/issues/1818
  #
  # Additionally, we want to print more debugging text even if ShellCheck exits
  # with a non-zero status, and we want to capture that status so that we can
  # use it for our own exit status, so we need to temporarily disable the option
  # that causes Bash to exit immediately when a command exits with a non-zero
  # exit code.
  #
  # http://redsymbol.net/articles/unofficial-bash-strict-mode/#expect-nonzero-exit-status
  set +e
  shellcheck --external-sources "${FILES_TO_LINT[@]}"
  SHELLCHECK_EXIT_STATUS=$?
  set -e

  if ${ARGS[--debug]}; then
    # If ShellCheck exited with a non-zero exit code, then it printed output. If
    # it printed output, we should show newline before the next debugging
    # statement.
    if (( SHELLCHECK_EXIT_STATUS != 0 )); then
      echo
    fi
    echo "${#FILES_TO_LINT[@]} files were linted with ShellCheck."
  fi

  exit $SHELLCHECK_EXIT_STATUS
}

main
