#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2023 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Rename files in the current directory, non-recursively, to ordinal, sequential
numbers. The first file according to \$LC_COLLATE is renamed to 1, the second
file is renamed to 2, and so on.

File extensions are preserved. Filenames are padded when appropriate. That is,
if there are 10-99 files, the first file will be named 01, and if there are
100-999 files, the first file will be named 001.

Usage:
  $COMMAND_NAME
  $COMMAND_NAME -h | --help

Options:
  -h, --help
      Show this documentation
EOF
)"

NUM_FILES=$(find . -maxdepth 1 -type f | wc --lines)

# Disable SC2086. We don't need to worry about double quoting here because
# $NUM_FILES is an integer.
#
# shellcheck disable=SC2086
mapfile -t PADDED_NUMBERS < <(seq --equal-width $NUM_FILES)

I=0
for FILENAME in *; do
  # Skip anything that isn't a file.
  [[ ! -f "$FILENAME" ]] && continue

  # If the file has an extension, EXTENSION_OR_FILENAME is that extension. If
  # the file has no extension, EXTENSION_OR_FILENAME is the filename itself.
  EXTENSION_OR_FILENAME=${FILENAME##*.}
  if [[ "$EXTENSION_OR_FILENAME" == "$FILENAME" ]]; then
    NEW_FILENAME=${PADDED_NUMBERS[$I]}
  else
    NEW_FILENAME=${PADDED_NUMBERS[$I]}.$EXTENSION_OR_FILENAME
  fi

  # The --no-clobber option ensures that an existing file will not be
  # overwritten, which would otherwise happen if there's a file in this
  # directory which already has this number as its filename. It also suppressed
  # error messages like "'1.png' and '1.png' are the same file", which can be
  # raised if this script is run more than once in the same directory.
  mv --no-clobber "$FILENAME" "$NEW_FILENAME"

  I=$((I + 1))
done
