#!/usr/bin/env bash

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

# git-upstream:
# A small Git extension that prints the name of the upstream branch or prints
# nothing and returns with an error code if there is no upstream branch.
#
# Installation:
# Save this script to a file named "git-upstream" somewhere along your $PATH.
# Run `chmod u+x git-upstream` to make it executable. Now, when you run "git
# upstream", Git will run this script as if it were a built-in command. Neat!
#
# Usage:
# git upstream
#
# This script is based on the following Stack Overflow answer:
# https://stackoverflow.com/a/9753364/715866

# Running "git rev-parse" prints an error if we are not in a Git repo. If the
# command is successful, however, it is silent and we continue.
if git rev-parse; then
  # Redirect stderr to /dev/null to avoid printing error if there is no upstream
  # branch. Note that this script will nonetheless return with an error code if
  # there is no upstream branch.
  git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}" 2> /dev/null
fi
