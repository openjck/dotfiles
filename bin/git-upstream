#!/usr/bin/env bash

# git-upstream:
# Print the name of the upstream Git branch.
#
# Installation instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#installation
#
# Usage instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#usage

# MIT License
#
# Copyright (c) 2023, 2025 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

##########################
# BEGIN DEPENDENCY CHECK #
##########################

DEPENDENCIES=(
  docopts
  git
)

MISSING_DEPENDENCIES=()

for DEPENDENCY in "${DEPENDENCIES[@]}"; do
  if ! command -v "$DEPENDENCY" > /dev/null; then
    MISSING_DEPENDENCIES+=("$DEPENDENCY")
  fi
done

if (( ${#MISSING_DEPENDENCIES[@]} > 0 )); then
  >&2 fold --spaces <<EOF
FATAL ERROR: The following are not installed. They must be manually installed \
for "$COMMAND_NAME" to function properly.

EOF
  for DEPENDENCY in "${MISSING_DEPENDENCIES[@]}"; do
    >&2 echo "  - $DEPENDENCY"
  done
  exit 1
fi

########################
# END DEPENDENCY CHECK #
########################

COMMAND_NAME=$(basename "$0")
GIT_SUBCOMMAND_NAME=${COMMAND_NAME/git-/}

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Print the name of the upstream Git branch.

If there is no upstream Git branch, print nothing and return with an error code.

If this script exists somewhere along the \$PATH, it can be used as a Git
subcommand, like so:

  git $GIT_SUBCOMMAND_NAME

When used as a Git subcommand, the command accepts the same arguments and
behaves in the same way.

Usage:
  $COMMAND_NAME
  $COMMAND_NAME -h | --help

Options:
  -h, --help
      Show this documentation
EOF
)"

# This script is based on the following Stack Overflow answer:
# https://stackoverflow.com/a/9753364/715866

# Running "git rev-parse" prints an error if we are not in a Git repo. If the
# command is successful, however, it is silent and we continue.
if git rev-parse; then
  # Redirect stderr to /dev/null to avoid printing error if there is no upstream
  # branch. Note that this script will nonetheless return with an error code if
  # there is no upstream branch.
  git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}" 2> /dev/null
fi
