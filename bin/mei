#!/usr/bin/env bash

# mei:
# Move Everything Into (MEI) a new directory with the given name.
#
# Installation instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#installation
#
# Usage instructions:
# https://github.com/openjck/dotfiles/blob/main/docs/scripts.md#usage

# MIT License
#
# Copyright (c) 2024, 2025 John Karahalis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Use "strict mode."
#
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

COMMAND_NAME=$(basename "$0")

##########################
# BEGIN DEPENDENCY CHECK #
##########################

DEPENDENCIES=(
  docopts
)

MISSING_DEPENDENCIES=()

for DEPENDENCY in "${DEPENDENCIES[@]}"; do
  if ! command -v "$DEPENDENCY" > /dev/null; then
    MISSING_DEPENDENCIES+=("$DEPENDENCY")
  fi
done

if (( ${#MISSING_DEPENDENCIES[@]} > 0 )); then
  >&2 fold --spaces <<EOF
FATAL ERROR: The following are not installed. You must install them on your \
own for "$COMMAND_NAME" to function properly.

EOF
  for DEPENDENCY in "${MISSING_DEPENDENCIES[@]}"; do
    >&2 echo "  - $DEPENDENCY"
  done
  exit 1
fi

########################
# END DEPENDENCY CHECK #
########################

eval "$(docopts --help=- -A ARGS : "$@" <<EOF
Move Everything Into (MEI) a new directory with the given name.

That is, move all files and directories in the current directory into a new
directory with the given name.

Usage:
  $COMMAND_NAME DIRECTORY
  $COMMAND_NAME -h | --help

Examples:
  $COMMAND_NAME /path/to/new/directory

Extended example:
  $ tree --noreport
  .
  ├── cat.png
  ├── dog.png
  └── fish
      ├── goldfish.png
      └── neon-tetra.png
  $ $COMMAND_NAME animals
  $ tree --noreport
  .
  └── animals
      ├── cat.png
      ├── dog.png
      └── fish
          ├── goldfish.png
          └── neon-tetra.png
  $ $COMMAND_NAME life
  $ tree --noreport
  .
  └── life
      └── animals
          ├── cat.png
          ├── dog.png
          └── fish
              ├── goldfish.png
              └── neon-tetra.png

Options:
  -h, --help
      Show this documentation
EOF
)"

# Move hidden files (e.g., .gitignore) when using "mv".
shopt -s dotglob

# Move everything into a temporary directory first in case there is already a
# file or directory in the current directory with the given name.
#
# For example, this handles the case where there is a directory in the current
# directory named "matryoshka" and the user wants to move it into a new
# directory also named "matryoshka", so that the original directory is named
# "matryoshka/matryoshka".
#
# If this weren't a consideration, we could use this simpler approach:
# https://stackoverflow.com/a/789029/715866
TEMP_DIRECTORY=$(mktemp --directory)
mv ./* "$TEMP_DIRECTORY"
mkdir -p "${ARGS[DIRECTORY]}"
mv "$TEMP_DIRECTORY"/* "${ARGS[DIRECTORY]}"
